rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    match /projects/{projectId} {
      // create時はrequest.resource.data、update/read時はresource.data
      allow create: if request.auth != null
        && request.resource.data.createdBy == request.auth.uid
        && request.resource.data.members != null
        && request.auth.uid in request.resource.data.members;
      allow read, update, delete: if request.auth != null
        && (resource.data.createdBy == request.auth.uid
            || (resource.data.members != null && request.auth.uid in resource.data.members));

      // invitesサブコレクションの特別なルール（シンプル化）
      match /invites/{inviteId} {
        allow read: if request.auth != null
          && (get(/databases/$(database)/documents/projects/$(projectId)).data.members.hasAny([request.auth.uid]));
        allow create: if request.auth != null
          && get(/databases/$(database)/documents/projects/$(projectId)).data.members.hasAny([request.auth.uid])
          && request.resource.data.status == 'pending'
          && request.resource.data.inviterUid == request.auth.uid;
      }

      // その他のサブコレクション用の一般ルール
      match /{subcollection=**}/{docId} {
        allow read, write: if request.auth != null
          && (get(/databases/$(database)/documents/projects/$(projectId)).data.createdBy == request.auth.uid
              || (get(/databases/$(database)/documents/projects/$(projectId)).data.members != null
                  && request.auth.uid in get(/databases/$(database)/documents/projects/$(projectId)).data.members));
      }
    }

    // archives
    match /archives/{archiveId} {
      allow read, write: if request.auth != null
        && (
          // 新規作成時
          (request.method == 'create' && request.resource.data.createdBy == request.auth.uid)
          // 読み取り、更新、削除時
          || (request.method != 'create' && (
              resource.data.createdBy == request.auth.uid
              || (resource.data.members != null && request.auth.uid in resource.data.members)
          ))
        );
    }

    // users - フレンド機能のために読み取り権限を拡大
    match /users/{userId} {
      // 自分のドキュメントは完全なアクセス権
      allow write: if request.auth != null && request.auth.uid == userId;
      // 他のユーザーの基本情報（表示名、メールアドレス）は読み取り可能
      allow read: if request.auth != null;
    }

    // friendships - フレンド関係を管理
    match /friendships/{friendshipId} {
      // 自分が送信者または受信者の場合のみ読み取り可能
      allow read: if request.auth != null 
        && (resource.data.user1Id == request.auth.uid 
            || resource.data.user2Id == request.auth.uid);
      
      // フレンドリクエストの作成（自分がuser1Idの場合のみ）
      allow create: if request.auth != null 
        && request.resource.data.user1Id == request.auth.uid
        && request.resource.data.status == 'pending'
        && request.resource.data.createdAt is timestamp
        && request.resource.data.updatedAt is timestamp;
      
      // フレンドリクエストの更新（送信者または受信者の場合のみ）
      allow update: if request.auth != null 
        && (resource.data.user1Id == request.auth.uid 
            || resource.data.user2Id == request.auth.uid)
        && request.resource.data.updatedAt is timestamp;
      
      // フレンドシップの削除（どちらかのユーザーが可能）
      allow delete: if request.auth != null 
        && (resource.data.user1Id == request.auth.uid 
            || resource.data.user2Id == request.auth.uid);
    }

    // friendRequests - フレンドリクエストを管理
    match /friendRequests/{requestId} {
      // ドキュメントの読み取り権限
      allow get: if request.auth != null && (
        resource.data.fromUserId == request.auth.uid || 
        resource.data.toUserId == request.auth.uid
      );
      
      // リストとクエリの読み取り権限
      allow list: if request.auth != null && (
        request.query.limit <= 50 && (
          // 送信済みフレンド申請の取得
          (request.query.where.fromUserId == request.auth.uid && 
           request.query.where.status == 'pending') ||
          // 受信したフレンド申請の取得
          (request.query.where.toUserId == request.auth.uid && 
           request.query.where.status == 'pending')
        )
      );

      allow create: if request.auth != null && 
        request.resource.data.fromUserId == request.auth.uid &&
        request.resource.data.status == 'pending';

      allow delete: if request.auth != null && 
        resource.data.fromUserId == request.auth.uid;
    }

    // コレクショングループクエリのルール
    match /{path=**}/todos/{todoId} {
      allow read: if request.auth != null
        && (
          // 自分に割り当てられたTodoは常に読み取り可能
          resource.data.assignee == request.auth.uid
          // または、プロジェクトのメンバーの場合も読み取り可能
          || (
            exists(/databases/$(database)/documents/projects/$(path[1]))
            ? (
                get(/databases/$(database)/documents/projects/$(path[1])).data.createdBy == request.auth.uid
                || (get(/databases/$(database)/documents/projects/$(path[1])).data.members != null
                    && request.auth.uid in get(/databases/$(database)/documents/projects/$(path[1])).data.members)
              )
            : exists(/databases/$(database)/documents/archives/$(path[1]))
              ? (
                  get(/databases/$(database)/documents/archives/$(path[1])).data.createdBy == request.auth.uid
                  || (get(/databases/$(database)/documents/archives/$(path[1])).data.members != null
                      && request.auth.uid in get(/databases/$(database)/documents/archives/$(path[1])).data.members)
                )
              : false
          )
        );
    }
  }
}