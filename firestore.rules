rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    match /projects/{projectId} {
      // プロジェクトのタイトルやIDだけ全認証ユーザーが見られる
      allow list: if isAuthenticated();
      allow create: if isAuthenticated()
        && request.resource.data.createdBy == request.auth.uid
        && request.resource.data.members != null
        && request.auth.uid in request.resource.data.members;
      
      allow read, update, delete: if isAuthenticated()
        && (resource.data.createdBy == request.auth.uid
            || (resource.data.members != null && request.auth.uid in resource.data.members));

      // invitesサブコレクションの特別なルール（シンプル化）
      match /invites/{inviteId} {
        allow read: if request.auth != null
          && (get(/databases/$(database)/documents/projects/$(projectId)).data.members.hasAny([request.auth.uid]));
        allow create: if request.auth != null
          && get(/databases/$(database)/documents/projects/$(projectId)).data.members.hasAny([request.auth.uid])
          && request.resource.data.status == 'pending'
          && request.resource.data.inviterUid == request.auth.uid;
      }

      // commentsサブコレクション
      match /comments/{commentId} {
        allow read: if isProjectMember(projectId);
        // likesフィールドだけの更新、または全体が同じ場合のみ許可
        allow update: if isProjectMember(projectId)
          && (request.resource.data.keys().hasOnly(['likes']) || request.resource.data == resource.data);
        allow create, delete: if isProjectMember(projectId);

        // repliesサブコレクション（明示的に全権限）
        match /replies/{replyId} {
          allow read, create, update, delete: if isProjectMember(projectId);
        }
      }

      // issuesサブコレクション
      match /issues/{issueId} {
        allow read, create, update, delete: if isProjectMember(projectId);

        // todosサブコレクション（明示的に全権限）
        match /todos/{todoId} {
          allow read, create, update, delete: if isProjectMember(projectId);
        }
      }

      // その他のサブコレクション用の一般ルール（catch-all、必ず一番下に！）
      match /{subcollection=**}/{docId} {
        allow read, write: if request.auth != null
          && (get(/databases/$(database)/documents/projects/$(projectId)).data.createdBy == request.auth.uid
              || (get(/databases/$(database)/documents/projects/$(projectId)).data.members != null
                  && request.auth.uid in get(/databases/$(database)/documents/projects/$(projectId)).data.members));
      }
    }

    // archives
    match /archives/{archiveId} {
      allow read, write: if request.auth != null
        && (
          // 新規作成時
          (request.method == 'create' && request.resource.data.createdBy == request.auth.uid)
          // 読み取り、更新、削除時
          || (request.method != 'create' && (
              resource.data.createdBy == request.auth.uid
              || (resource.data.members != null && request.auth.uid in resource.data.members)
          ))
        );

      // サブコレクション（comments, repliesなど）にも同じ権限を適用
      match /{subcollection=**}/{docId} {
        allow read, write: if request.auth != null
          && (
            get(/databases/$(database)/documents/archives/$(archiveId)).data.createdBy == request.auth.uid
            || (get(/databases/$(database)/documents/archives/$(archiveId)).data.members != null
                && request.auth.uid in get(/databases/$(database)/documents/archives/$(archiveId)).data.members)
          );
      }
    }
    // users
    match /users/{userId} {
      allow write: if request.auth != null && request.auth.uid == userId;
      allow read: if request.auth != null;

match /users/{userId}/notifications {
  allow list: if true;
}
match /users/{userId}/notifications/{notificationId} {
  allow read: if true;
  allow write: if request.auth != null && (
    request.auth.uid == userId ||
    (
      exists(/databases/$(database)/documents/projects/$(request.resource.data.projectId)) &&
      (
        get(/databases/$(database)/documents/projects/$(request.resource.data.projectId)).data.createdBy == request.auth.uid ||
        (
          get(/databases/$(database)/documents/projects/$(request.resource.data.projectId)).data.members != null &&
          request.auth.uid in get(/databases/$(database)/documents/projects/$(request.resource.data.projectId)).data.members
        )
      )
    )
  );
    }

    }


    // コレクショングループクエリのルール
    match /{path=**}/todos/{todoId} {
      allow read: if request.auth != null
        && (
          // 自分に割り当てられたTodoは常に読み取り可能
          resource.data.assignee == request.auth.uid
          // または、プロジェクトのメンバーの場合も読み取り可能
          || (
            exists(/databases/$(database)/documents/projects/$(path[1]))
            ? (
                get(/databases/$(database)/documents/projects/$(path[1])).data.createdBy == request.auth.uid
                || (get(/databases/$(database)/documents/projects/$(path[1])).data.members != null
                    && request.auth.uid in get(/databases/$(database)/documents/projects/$(path[1])).data.members)
              )
            : exists(/databases/$(database)/documents/archives/$(path[1]))
              ? (
                  get(/databases/$(database)/documents/archives/$(path[1])).data.createdBy == request.auth.uid
                  || (get(/databases/$(database)/documents/archives/$(path[1])).data.members != null
                      && request.auth.uid in get(/databases/$(database)/documents/archives/$(path[1])).data.members)
                )
              : false
          )
        );
    }
    }
  }

  // 共通関数
  function isAuthenticated() {
    return request.auth != null;
  }

  function isProjectMember(projectId) {
    let project = get(/databases/$(database)/documents/projects/$(projectId));
    return isAuthenticated() && 
      (project.data.createdBy == request.auth.uid || 
      (project.data.members != null && request.auth.uid in project.data.members));
}